@page "/migrationjobviewer/{jobId}"

@using OnlineMongoMigrationProcessor;
@using MongoMigrationWebApp.Components
@inject Service.JobManager JobManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject Service.FileService FileService
@inject HttpClient HttpClient

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>
        <button class="btn btn-light" @onclick="GoBack" title="Back to Job List" style="border: none; background: transparent;">
            <i class="bi bi-arrow-left"></i>
        </button> @MigrationJob?.Name - Job Status
    </h3>
    <div class="d-flex align-items-center mb-3">
        @if (MigrationJob !=null && !MigrationJob.IsCompleted && !MigrationJob.CurrentlyActive && (MigrationJob.IsStarted || (JobManager.MigrationWorker != null && !JobManager.MigrationWorker.IsProcessRunning())))
        {
            <div class="btn-group mx-2">
                <button class="btn btn-primary dropdown-toggle" type="button" id="resumeJobDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Resume Job
                </button>
                <ul class="dropdown-menu" aria-labelledby="resumeJobDropdown">
                    <li><a class="dropdown-item" @onclick="ResumeJobWithNewConnectionString">With Updated Connection Strings</a></li>
                    @if (! string.IsNullOrEmpty(MigrationJob.SourceConnectionString) && !string.IsNullOrEmpty(MigrationJob.TargetConnectionString))
                    {
                        <li><a class="dropdown-item" @onclick="ResumeJob">With Existing Connection Strings</a></li>
                    }
                </ul>
            </div>
        }

        @if (MigrationJob!=null && !MigrationJob.IsCancelled && !MigrationJob.IsCompleted && MigrationJob.CurrentlyActive && JobManager.MigrationWorker != null && JobManager.MigrationWorker.IsProcessRunning())
        {
            <button class="btn btn-primary mx-2" title="Pause Job" @onclick="PauseJob">Pause Job</button>

            @if (MigrationJob.IsOnline && MigrationJob.SyncBackAfterMigration && !MigrationJob.SyncBackStarted)
            {               
                <button class="btn btn-warning dropdown-toggle" title="Perform Cut Over" disabled="@(!CheckCutoverReadiness())" data-bs-toggle="dropdown" aria-expanded="false">Cut Over</button>

                <ul class="dropdown-menu" aria-labelledby="performCutOverDropdown">
                    <li><a class="dropdown-item" @onclick="InitSyncBackJob">With Sync Back</a></li>
                    <li><a class="dropdown-item" @onclick="CompleteJob">Without Sync Back</a></li>

                </ul>
            }                 
            else if(MigrationJob.IsOnline && MigrationJob.SyncBackAfterMigration && MigrationJob.SyncBackStarted)
            {
                <button class="btn btn-warning" title="Complete Job" @onclick="CompleteJob">Complete Job</button>
            }
            else if (MigrationJob.IsOnline && !MigrationJob.SyncBackAfterMigration )
            {
                <button class="btn btn-warning" title="Perform Cut Over" disabled="@(!CheckCutoverReadiness())" @onclick="CompleteJob">Cut Over</button>
            }  

            <button class="btn btn-toolbar" title="Refresh" @onclick="Refresh">
                <i class="bi bi-arrow-repeat"></i>
            </button>
        }

    </div>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-2">@_errorMessage</div>
}


@if (_migrationDetailsPopUpOpen && MigrationJob != null)
{
    <MongoMigrationWebApp.Components.MigrationDetails NewMode=false 
    Job="@MigrationJob"    
    OnSubmit="@OnMigrationDetailsPopUpSubmit"
    CheckNameExists="CheckIfNameExistsAsync" />
}

@if (_yesNoDialogOpen)
{
    if(MigrationJob.SyncBackStarted)
    {
        <YesNoDialog Type="YesNoDialog.Category.CompleteNot" Caption="Confirmation Required"  Message="@_message" OnClose="@YesNoDialogSubmit"  />
    }
    else 
    {
        <YesNoDialog Type="YesNoDialog.Category.CompleteNot" Caption="Confirmation Required"  Message="@_message" OnClose="@YesNoDialogSubmit"  />
    }
}

@if (_manageCollectionDialogOpen && MigrationJob != null)
{
    <ManageCollections MigrationUnits="@MigrationJob.MigrationUnits" OnCollectionsUpdated="@OnCollectionsUpdated" />
}

<table class="table">
    <thead>
        <tr>
            <th>Database Name</th>
            <th>Collection Name</th>
            @if (MigrationJob != null && MigrationJob.UseMongoDump)
            {
                <th>Download Status</th>
                <th>Upload Status</th>
            }
            else
            {
                <th>Copy Status</th>
            }
            @if (MigrationJob != null && MigrationJob.IsOnline && !MigrationJob.SyncBackStarted)
            {
                <th>Time Since Last Change</th>
            }
            @if (MigrationJob != null && MigrationJob.IsOnline && MigrationJob.SyncBackStarted)
            {
                <th>Time Since Last Sync Back</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (MigrationJob!=null && MigrationJob.MigrationUnits != null)
        {
            @foreach (var unit in MigrationJob.MigrationUnits)
            {
                <tr>
                    <td>@unit.DatabaseName</td>
                    <td>@unit.CollectionName</td>                    

                    <td>
                        @(unit.SourceStatus == CollectionStatus.NotFound ? "MISSING or EMPTY" : (unit.DumpComplete ? "Success" : $"{unit.DumpPercent:F1}%"))
                    </td>

                    @if (MigrationJob != null && MigrationJob.UseMongoDump)
                    {
                        <td>
                            @(unit.SourceStatus == CollectionStatus.NotFound ? "MISSING or EMPTY" : (unit.RestoreComplete || unit.RestorePercent == 100 ? "Success" : $"{unit.RestorePercent:F1}%"))
                        </td>
                    }
                    @if (MigrationJob != null && MigrationJob.IsOnline && !MigrationJob.SyncBackStarted)
                    {
                        <td>
                            @GetChangeStreamLag(unit.CursorUtcTimestamp)
                        </td>
                    }
                    @if (MigrationJob != null && MigrationJob.IsOnline && MigrationJob.SyncBackStarted)
                    {
                        <td>
                            @GetChangeStreamLag(unit.SyncBackCursorUtcTimestamp)
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
<div class="d-flex align-items-center mb-3">
    <button class="btn btn-primary mx-2" title="Update Collections" @onclick="ManageCollections" disabled="@(MigrationJob.SyncBackStarted)" >Update Collections</button>
</div>

<h5 class="pt-4">
    Monitor
</h5>
<div>
    <table class="table message-output">
        <tbody>
            @if (LogBucket !=null && LogBucket.GetVerboseMessages() != null && LogBucket.GetVerboseMessages().Count > 0)
            {
                @foreach (var logObject in LogBucket.GetVerboseMessages())
                {
                    <tr class="@GetRowClass(logObject.Type.ToString(), logObject.Message)">
                        <td>
                            @if(string.IsNullOrEmpty(logObject.Message))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@logObject.Datetime - @logObject.Message</span>
                            }
                        </td>
                    </tr>
                }

            }
        </tbody>
    </table>
</div>


@if (LogBucket!=null && LogBucket.Logs != null)
{
    <h5 class=" pt-4">
        <button class="btn btn-light" @onclick="DownloadFile" title="Download Log File"  style="border: none; background: transparent;">
            <i class="bi bi-download"></i>
        </button> Logs
    </h5>


    <table class="table console-output">
        <thead>
            <tr>
                <th style="width: 150px;">Date Time (UTC)</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var logObject in LogBucket.Logs.TakeLast(200).Reverse())  // Reverse the last 200 items
            {
                <tr class="@GetRowClass(logObject.Type.ToString(),logObject.Message)">
                    <td>@logObject.Datetime</td>
                    <td>@logObject.Message</td>
                </tr>
            }                

            @if (LogBucket.Logs.Count > 250)
            {
                <tr>
                    <td> ....</td>
                    <td> ..... </td>
                </tr>

                @foreach (var logObject in LogBucket.Logs.Take(30).Reverse()) // Reverse the top 10 items
                {
                    <tr class="@GetRowClass(logObject.Type.ToString(),logObject.Message)">
                        <td style="width: 120px;">@logObject.Datetime</td>
                        <td>@logObject.Message</td>
                    </tr>
                }
            }
        </tbody>
    </table>


}
@code {

    #pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

    [Parameter]
    public string? JobId { get; set; }

    [Parameter]
    public MigrationJob? MigrationJob { get; set; }

    [Parameter]
    public LogBucket? LogBucket { get; set; }

    private string _errorMessage = string.Empty;
    private bool _migrationDetailsPopUpOpen;
    private Timer? _refreshTimer;
    private string _message = string.Empty;
    private bool _yesNoDialogOpen;
    private bool _manageCollectionDialogOpen;

    private string GetRowClass(string type, string message)
    {
        string rowClass = string.Empty;
        string lowerMessage = message.ToLower();

        if (lowerMessage.Contains("warning") || lowerMessage.Contains("failure") || lowerMessage.Contains("error") || lowerMessage.Contains("failed") || lowerMessage.Contains("cancel"))
        {
            rowClass = "warning-row"; // Change to warning-row if any condition matches
        }

        if (type == "Error")
        {
            rowClass = "error-row"; // Assign the default row class
        }

        return rowClass;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/"); // Navigate back to the previous page
    }

    private void StartAutoRefresh()
    {
        _refreshTimer = new Timer(Refresh, null, 0, 5000); // Update every 10 seconds
    }

    private async Task DownloadFile()
    {
        var url = $"/api/File/download/log/{JobId}"; // Adjust the API URL if needed
        var response = await HttpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";

            // Use JavaScript to trigger the file download
            await JS.InvokeVoidAsync("downloadFile", fileBytes, $"{JobId}.json", contentType);
        }
        else
        {
            Console.Error.WriteLine($"Failed to download log file: {JobId}.json");
        }
    }

    private void Refresh(object? state)
    {
        MigrationJob = JobManager.GetMigrations().Find(m => m.Id == JobId);
        LogBucket = JobManager.GetLogBucket(JobId);

        InvokeAsync(StateHasChanged); // Ensure UI updates on the main thread
    }

    private Task<bool> CheckIfNameExistsAsync(string name)
    {
        //always false as we are not checking for duplicate names in this case
        return Task.FromResult(false);
    }

    private string GetChangeStreamLag(DateTime cursorUtcTimestamp)
    {
        if (cursorUtcTimestamp == DateTime.MinValue)
        {
            return "NA";
        }

        var currentUtc = DateTime.UtcNow;
        var lag = currentUtc - cursorUtcTimestamp;

        if (lag.TotalSeconds < 0)
        {
            return "Invalid";
        }

        return $"{(int)lag.TotalMinutes} min {(int)lag.Seconds} sec";
    }

    private bool CheckCutoverReadiness()
    {
        if (MigrationJob?.MigrationUnits == null) return false;
        foreach (var item in MigrationJob.MigrationUnits)
        {
            if (item.SourceStatus != CollectionStatus.NotFound)
            {
                if (item.DumpPercent != 100 || item.RestorePercent != 100)
                    return false;
            }
        }
        return true;
    }

    protected override async Task OnParametersSetAsync()
    {
        MigrationJob = JobManager.GetMigrations().Find(m => m.Id == JobId);
        LogBucket = JobManager.GetLogBucket(JobId);

        if (!MigrationJob.IsStarted || (!MigrationJob.IsCancelled && !MigrationJob.IsCompleted && MigrationJob.CurrentlyActive && !IsJobRunning()))
        {
            await ResumeJob();
        }
        if (!MigrationJob.IsCancelled && !MigrationJob.IsCompleted && MigrationJob.CurrentlyActive && IsJobRunning())
        {
            StartAutoRefresh();
        }
    }

    private async Task OnMigrationDetailsPopUpSubmit(MigrationJob job)
    {
        _migrationDetailsPopUpOpen = false;
        Thread.Sleep(100);
        if (job != null)
        {
            MigrationJob.SourceConnectionString = job.SourceConnectionString;
            MigrationJob.TargetConnectionString = job.TargetConnectionString;

            MigrationJob.CurrentlyActive = true;
            MigrationJob.IsCancelled = false;

            if (!MigrationJob.StartedOn.HasValue)
                MigrationJob.StartedOn = DateTime.UtcNow;

            MigrationJob.IsStarted = true;

            StartAutoRefresh();

            JobManager.Save();

            // Run the long task on a separate thread
            await Task.Run(() =>
            {
                JobManager.DisposeLogs();
#pragma warning disable CS4014

                if(MigrationJob.SyncBackStarted && !MigrationJob.IsSimulatedRun)
                {
                    JobManager.MigrationWorker.SyncBackToSource(MigrationJob.SourceConnectionString, MigrationJob.TargetConnectionString, MigrationJob);
                }
                else
                {
                    JobManager.MigrationWorker.StartMigrationAsync(MigrationJob, MigrationJob.SourceConnectionString, MigrationJob.TargetConnectionString, MigrationJob.NameSpaces, MigrationJob.UseMongoDump, MigrationJob.IsOnline);
                }                
            });
        }
        else
        {
            MigrationJob.CurrentlyActive = false;
        }
    }

    private void ManageCollections()
    {
        _errorMessage = string.Empty;
        if (!JobManager.MigrationWorker.IsProcessRunning() && NoOtherActiveJobs())
        {
            _manageCollectionDialogOpen = true;
        }
        else
        {
            _errorMessage = "Please pause the job, before updating collections.";
        }
    }
    private async Task ResumeJobWithNewConnectionString()
    {
        MigrationJob.SourceConnectionString = string.Empty;
        MigrationJob.TargetConnectionString = string.Empty;
        await ResumeJob();
    }

    private async Task ResumeJob()
    {
        _errorMessage = string.Empty;
        if (!JobManager.MigrationWorker.IsProcessRunning() && NoOtherActiveJobs())
        {
            if (string.IsNullOrEmpty(MigrationJob.SourceConnectionString) || string.IsNullOrEmpty(MigrationJob.TargetConnectionString))
                _migrationDetailsPopUpOpen = true;
            else
                await OnMigrationDetailsPopUpSubmit(MigrationJob);
        }
        else
        {
            _errorMessage = "Please stop active job, before starting/resuming a job.";
        }
    }

    private bool IsJobRunning()
    {
        return JobManager.MigrationWorker.IsProcessRunning();
    }

    private void InitSyncBackJob()
    {
      JobManager.MigrationWorker.SyncBackToSource(MigrationJob.SourceConnectionString, MigrationJob.TargetConnectionString, MigrationJob);
    }

    private void CompleteJob()
    {
        if(MigrationJob.SyncBackStarted)
        {
            _message = "You can't resume a job after its completed. Are you sure you want to complete the job?";
        }
        else
        {
            _message = "You can't resume a job after its cutover. Are you sure you want to cutover?";
        }        
        _yesNoDialogOpen = true;
    }

    private void OnCollectionsUpdated(List<MigrationUnit> migrationUnits)
    {
        _manageCollectionDialogOpen = false;

        if (migrationUnits != null)
        {
            MigrationJob.NameSpaces = string.Join(",", migrationUnits.Select(x => x.DatabaseName + "." + x.CollectionName));
            MigrationJob.MigrationUnits = migrationUnits;
            JobManager.Save();
        }
    }

    private void YesNoDialogSubmit(bool approved)
    {
        _yesNoDialogOpen = false;
        if (approved)
        {
            JobManager.MigrationWorker.StopMigration();
            MigrationJob.IsCancelled = true;
            MigrationJob.IsCompleted = true;
            MigrationJob.CurrentlyActive = false;
            JobManager.Save();
            _refreshTimer = null;
        }
    }

    private void PauseJob()
    {
        _errorMessage = string.Empty;

        JobManager.MigrationWorker.StopMigration();
        MigrationJob.IsCancelled = true;
        MigrationJob.CurrentlyActive = false;
        JobManager.Save();
        _refreshTimer = null;
    }

    private bool NoOtherActiveJobs()
    {
        foreach (var job in JobManager.GetMigrations())
        {
            if (job.CurrentlyActive && job.Id != JobId)
                return false;
        }
        return true;
    }
}

